package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.movement.Fly
import net.ccbluex.liquidbounce.features.module.modules.movement.Speed
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.ServerUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.init.Items
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.server.S02PacketChat
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.server.S2BPacketChangeGameState
import java.util.*
import java.util.concurrent.ConcurrentLinkedQueue
import kotlin.math.pow
import kotlin.math.roundToInt
import kotlin.math.sqrt

@ModuleInfo(name = "Disabler", category = ModuleCategory.EXPLOIT, description = "skid")
class Disabler : Module() {
    private val modeValue =
        ListValue("Mode", arrayOf("Basic", "Verus", "Hypixel", "Hypixel2", "FakeLag", "Matrix"), "Verus")
    private val debugValue = BoolValue("Debug", false)
    private val fakeLagBlockValue = BoolValue("FakeLagBlock", true)
    private val fakeLagPosValue = BoolValue("FakeLagPosition", true)
    private val fakeLagAttackValue = BoolValue("FakeLagAttack", true)
    private val fakeLagSpoofValue = BoolValue("FakeLagC03Spoof", false)
    private val lagDelayValue = IntegerValue("LagDelay", 0, 0, 2000)
    private val lagDurationValue = IntegerValue("LagDuration", 200, 100, 1000)
    private val autoAlert = BoolValue("Hypixel2BanAlert", false)
    private val rotModify = BoolValue("Hypixel2RotationModifier", false)
    private val testFeature = BoolValue("Hypixel2PingSpoof", true)
    private val testDelay = IntegerValue("Hypixel2Delay", 400, 0, 1000)
    private val checkValid = BoolValue("Hypixel2InvValidate", false)
    private val verusSlientFlagApplyValue = BoolValue("VerusSlientFlagApply", false)
    private val verusBufferSizeValue = IntegerValue("VerusBufferSize", 300, 0, 1000)
    private val verusRepeatTimesFightingValue = IntegerValue("Verus-RepeatTimesFighting", 1, 1, 5)
    private val verusRepeatTimesValue = IntegerValue("Verus-RepeatTimes", 1, 1, 5)
    private val verusFlagDelayValue = IntegerValue("Verus-FlagDelay", 40, 35, 60)
    private val matrixNoCheck = BoolValue("Matrix-NoModuleCheck", false)
    private val matrixMoveFix = BoolValue("Matrix-MoveFix", true)
    private val matrixNoMovePacket = BoolValue("Matrix-NoMovePacket", true)
    private val flagMode = ListValue("Flag-Mode", arrayOf("Edit", "Packet"), "Edit")
    private val flagTick = IntegerValue("Flag-TickDelay", 25, 1, 200)
    private val flagSilent = BoolValue("Flag-SilentMode", true)
    private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
    private val anotherQueue = LinkedList<C00PacketKeepAlive>()
    private var verus2Stat = false
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var currentTrans = 0
    private var memeTick = 0
    private var isSent = false
    private val fakeLagDelay = MSTimer()
    private val fakeLagDuration = MSTimer()
    private var modified = false
    private var counter = 0
    private var alrSendY = false
    private var shouldActive = false
    var shouldModifyRotation = false
    private val wdTimer = MSTimer()
    private fun isInventory(action: Short): Boolean = action in 1..99
    private var x = 0.0
    private var y = 0.0
    private var z = 0.0
    private val repeatTimes: Int
        get() = if (LiquidBounce.combatManager.inCombat) {
            verusRepeatTimesFightingValue.get()
        } else {
            verusRepeatTimesValue.get()
        }

    override fun onEnable() {
        reset()
    }

    override fun onDisable() {
        if (modeValue.get().equals("hypixel2", true)) {
            anotherQueue.forEach { PacketUtils.sendPacketNoEvent(it) }
            packetQueue.forEach { PacketUtils.sendPacketNoEvent(it) }
        }
        modified = false
        when (modeValue.get().toLowerCase()) {
            "fakelag" -> {
                for (packet in packetBuffer) {
                    PacketUtils.sendPacketNoEvent(packet)
                }
                packetBuffer.clear()
            }
            "hypixel" -> {
                counter = 0
            }
        }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        reset()
    }

    private fun reset() {
        memeTick = 0
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
        fakeLagDelay.reset()
        fakeLagDuration.reset()
        counter = 0
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        modified = false
        when (modeValue.get().toLowerCase()) {

            "verus" -> {
                if (fakeLagDelay.hasTimePassed(490L)) {
                    fakeLagDelay.reset()
                    if (packetBuffer.isNotEmpty()) {
                        val packet = packetBuffer.poll()
                        repeat(repeatTimes) {
                            PacketUtils.sendPacketNoEvent(packet)
                        }
                        debugMessage("RELEASE")
                    } else {
                        debugMessage("RELEASE BUT EMPTY")
                    }
                }
            }

            "fakelag" -> {
                if (!fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) fakeLagDuration.reset()
                // Send
                if (fakeLagDuration.hasTimePassed(lagDurationValue.get().toLong())) {
                    fakeLagDelay.reset()
                    fakeLagDuration.reset()
                    for (packet in packetBuffer) {
                        PacketUtils.sendPacketNoEvent(packet)
                    }
                    debugMessage("Release buf(size=${packetBuffer.size})")
                    isSent = true
                    packetBuffer.clear()
                }
            }
        }
    }

    @EventTarget()
    fun onMotion(event: MotionEvent) {
        if (modeValue.get().equals("hypixel2", true)) {
            val speed = LiquidBounce.moduleManager.getModule(Speed::class.java)!! as Speed
            shouldModifyRotation = false
            if (event.eventState == EventState.PRE) {
                if (speed.state && rotModify.get()) {
                    shouldModifyRotation = true
                }
                if (testFeature.get() && !ServerUtils.isHypixelLobby()) {
                    if (shouldActive && wdTimer.hasTimePassed(testDelay.get().toLong())) {
                        while (!anotherQueue.isEmpty()) {
                            PacketUtils.sendPacketNoEvent(anotherQueue.poll())
                            debugMessage("c00, ${anotherQueue.size}")
                        }
                        while (!packetQueue.isEmpty()) {
                            PacketUtils.sendPacketNoEvent(packetQueue.poll())
                            debugMessage("c0f, ${packetQueue.size}")
                        }
                    }
                }
            }
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        when (modeValue.get().toLowerCase()) {
            "hypixel2" -> {
                if (autoAlert.get() && packet is S02PacketChat && packet.chatComponent.unformattedText
                        .contains("Cages opened!", true)
                )
                    LiquidBounce.hud.addNotification(
                        Notification(
                            this.name,
                            "Speed is bannable until this notification disappears.",
                            NotifyType.WARNING,
                            20000
                        )
                    )

                if (testFeature.get() && !ServerUtils.isHypixelLobby()) {
                    if (packet is C0FPacketConfirmTransaction && (!checkValid.get() || !isInventory(packet.uid))) {
                        event.cancelEvent()
                        packetQueue.add(packet)

                        debugMessage("c0f, ${packet.uid} ID, ${packet.windowId} wID")

                        if (!shouldActive) {
                            shouldActive = true
                            debugMessage("activated")
                        }
                    }
                    if (packet is C00PacketKeepAlive) {
                        event.cancelEvent()
                        anotherQueue.add(packet)

                        wdTimer.reset()
                        debugMessage("c00, ${packet.key}")
                    }
                    if (packet is C03PacketPlayer || packet is C0BPacketEntityAction || packet is C08PacketPlayerBlockPlacement || packet is C0APacketAnimation) {
                        if (!shouldActive) {
                            event.cancelEvent()
                        }
                    }
                    if (packet is S08PacketPlayerPosLook && !shouldActive) {
                        if (alrSendY) {
                            //mc.netHandler.addToSendQueue(C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false))
                            event.cancelEvent()
                            debugMessage("no s08")
                        } else {
                            alrSendY = true
                            debugMessage("first s08, ignore")
                        }
                    }
                }
            }
            "flag" -> {
                if (packet is C03PacketPlayer && flagMode.get().equals(
                        "edit",
                        true
                    ) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0
                ) {
                    packet.isMoving = false
                    packet.onGround = false
                    packet.y = -0.08

                    debugMessage("flagged")
                }
                if (packet is S08PacketPlayerPosLook && flagSilent.get()) {
                    if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

                    var x = packet.x - mc.thePlayer.posX
                    var y = packet.y - mc.thePlayer.posY
                    var z = packet.z - mc.thePlayer.posZ
                    var diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        PacketUtils.sendPacketNoEvent(
                            C06PacketPlayerPosLook(
                                packet.getX(),
                                packet.getY(),
                                packet.getZ(),
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )

                        debugMessage("silent s08 accept")
                    }
                }
            }


            "matrix" -> {
                if (matrixNoCheck.get() || LiquidBounce.moduleManager.getModule(Speed::class.java)!!.state || LiquidBounce.moduleManager.getModule(
                        Fly::class.java
                    )!!.state
                ) {
                    if (packet is C03PacketPlayer) {
                        if (matrixNoMovePacket.get() && !packet.isMoving) {
                            event.cancelEvent()
                            debugMessage("no move, cancelled")
                            return
                        }
                        if (matrixMoveFix.get()) {
                            // almost completely disable strafe check, nofall
                            packet.onGround = true
                            if (!packet.rotating) { // fix fly sometimes doesn't land properly since 1.8.x servers all refer to C04, C05, C06 as C03s.
                                packet.rotating = true
                                packet.yaw = mc.thePlayer.rotationYaw
                                packet.pitch = mc.thePlayer.rotationPitch
                            }
                        }
                    }
                }
            }

            "Verus" -> {
                if (this.shouldNotRun()) {
                    this.packetBuffer.clear()
                    return
                }
                if (packet is C0FPacketConfirmTransaction) {
                    packetBuffer.add(packet)
                    event.cancelEvent()
                    if (packetBuffer.size > verusBufferSizeValue.get()) {
                        if (!verus2Stat) {
                            verus2Stat = true
                            LiquidBounce.hud.addNotification(
                                Notification(
                                    name,
                                    "AntiCheat Disabled!",
                                    NotifyType.SUCCESS
                                )
                            )
                        }
                        val packet = packetBuffer.poll()
                        repeat(repeatTimes) {
                            PacketUtils.sendPacketNoEvent(packet)
                        }
                    }
                } else if (packet is C03PacketPlayer) {
                    if ((mc.thePlayer.ticksExisted % verusFlagDelayValue.get() == 0) && (mc.thePlayer.ticksExisted > verusFlagDelayValue.get() + 1) && !modified) {
                        debugMessage("C03 MODIFY")
                        modified = true
                        packet.y -= 11.4514 // 逸一时，误一世
                        packet.onGround = false
                    }
                } else if (packet is S08PacketPlayerPosLook && verusSlientFlagApplyValue.get()) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        // why didnt they check flag apply delay? LMAO
                        debugMessage("FLAG APPLY")
                        PacketUtils.sendPacketNoEvent(
                            C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )
                    }
                }

                if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 7) {
                    fakeLagDelay.reset()
                    packetBuffer.clear()
                }
            }

            "basic" -> {
                if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) {
                    event.cancelEvent()
                }
            }

            "fakelag" -> {
                if (fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) {
                    if (isSent && fakeLagSpoofValue.get()) {
                        PacketUtils.sendPacketNoEvent(C03PacketPlayer(true))
                        if (lagDurationValue.get() >= 300) PacketUtils.sendPacketNoEvent(C03PacketPlayer(true))
                        isSent = false
                    }
                    if (packet is C00PacketKeepAlive || packet is C0FPacketConfirmTransaction) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if (fakeLagAttackValue.get() && (packet is C02PacketUseEntity || packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                        if (packet is C0APacketAnimation) return
                    }
                    if (fakeLagBlockValue.get() && (packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement || packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if (fakeLagPosValue.get() && (packet is C03PacketPlayer || packet is C04PacketPlayerPosition || packet is C05PacketPlayerLook || packet is C06PacketPlayerPosLook || packet is C0BPacketEntityAction)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                }
            }

            "hypixel" -> {
                if (event.packet is C06PacketPlayerPosLook) {
                    if (counter > 0) {
                        if (event.packet.x == x && event.packet.y == y && event.packet.z == z) {
                            mc.netHandler.networkManager.sendPacket(
                                C04PacketPlayerPosition(
                                    event.packet.x,
                                    event.packet.y,
                                    event.packet.z,
                                    event.packet.onGround
                                )
                            )
                            ClientUtils.displayChatMessage("[Disabler] Packet C04")
                            event.cancelEvent()
                        }
                    }
                    counter += 1

                    if (event.packet is C05PacketPlayerLook && mc.thePlayer.isRiding) {
                        mc.netHandler.addToSendQueue(
                            C0BPacketEntityAction(
                                mc.thePlayer,
                                C0BPacketEntityAction.Action.START_SPRINTING
                            )
                        )
                        ClientUtils.displayChatMessage("[Disabler] Packet C0B")
                    } else if (event.packet is C0CPacketInput && mc.thePlayer.isRiding) {
                        mc.netHandler.networkManager.sendPacket(event.packet)
                        mc.netHandler.addToSendQueue(
                            C0BPacketEntityAction(
                                mc.thePlayer,
                                C0BPacketEntityAction.Action.STOP_SNEAKING
                            )
                        )
                        ClientUtils.displayChatMessage("[Disabler] Packet C0B")
                        event.cancelEvent()
                    }
                }

                if (event.packet is S08PacketPlayerPosLook) {
                    val s08 = event.packet
                    x = s08.x
                    y = s08.y
                    z = s08.z
                    ClientUtils.displayChatMessage("[Disabler] Receive S08")
                }

                if (event.packet is S07PacketRespawn) {
                    counter = 0
                }
            }
        }
    }

    private fun shouldNotRun(): Boolean {
        return mc.thePlayer == null || mc.thePlayer.ticksExisted <= 5
    }

    private fun debugMessage(str: String) {
        if (debugValue.get()) {
            ClientUtils.displayChatMessage(" [Disabler] $str")
        }
    }

    override val tag: String
        get() = modeValue.get()
}