package net.ccbluex.liquidbounce.features.module.modules.exploit

import antiskidderobfuscator.NativeMethod
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.movement.Fly
import net.ccbluex.liquidbounce.features.module.modules.movement.Speed
import net.ccbluex.liquidbounce.features.module.modules.player.AntiFall
import net.ccbluex.liquidbounce.features.module.modules.world.Scaffold
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacketNoEvent
import net.ccbluex.liquidbounce.utils.ServerUtils
import net.ccbluex.liquidbounce.utils.angle.Angle
import net.ccbluex.liquidbounce.utils.angle.AngleUtility
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.utils.timer.TimerUtil
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.client.Minecraft
import net.minecraft.init.Items
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.potion.Potion
import net.minecraft.util.Vec3
import java.util.*
import java.util.concurrent.ConcurrentLinkedQueue
import java.util.concurrent.CopyOnWriteArrayList
import java.util.concurrent.ThreadLocalRandom
import kotlin.math.sqrt

@ModuleInfo(name = "Disabler", category = ModuleCategory.EXPLOIT, description = "skid")
class Disabler : Module() {
    private val modeValue =
        ListValue("Mode", arrayOf("Basic", "Verus","Dimples","FakeLag", "Matrix" , "Vulcan"), "Dimples")
    private val debugValue = BoolValue("Debug", false)
    private val fakeLagBlockValue = BoolValue("FakeLagBlock", true)
    private val fakeLagPosValue = BoolValue("FakeLagPosition", true)
    private val fakeLagAttackValue = BoolValue("FakeLagAttack", true)
    private val fakeLagSpoofValue = BoolValue("FakeLagC03Spoof", false)
    private val lagDelayValue = IntegerValue("LagDelay", 0, 0, 2000)
    private val lagDurationValue = IntegerValue("LagDuration", 200, 100, 1000)
    private val autoAlert = BoolValue("Hypixel2BanAlert", false)
    private val rotModify = BoolValue("Hypixel2RotationModifier", false)
    private val testFeature = BoolValue("Hypixel2PingSpoof", true)
    private val testDelay = IntegerValue("Hypixel2Delay", 400, 0, 1000)
    private val checkValid = BoolValue("Hypixel2InvValidate", false)
    private val verusSlientFlagApplyValue = BoolValue("VerusSlientFlagApply", false)
    private val verusBufferSizeValue = IntegerValue("VerusBufferSize", 300, 0, 1000)
    private val verusRepeatTimesFightingValue = IntegerValue("Verus-RepeatTimesFighting", 1, 1, 5)
    private val verusRepeatTimesValue = IntegerValue("Verus-RepeatTimes", 1, 1, 5)
    private val verusFlagDelayValue = IntegerValue("Verus-FlagDelay", 40, 35, 60)
    private val matrixNoCheck = BoolValue("Matrix-NoModuleCheck", false)
    private val matrixMoveFix = BoolValue("Matrix-MoveFix", true)
    private val matrixNoMovePacket = BoolValue("Matrix-NoMovePacket", true)
    private val flagMode = ListValue("Flag-Mode", arrayOf("Edit", "Packet"), "Edit")
    private val flagTick = IntegerValue("Flag-TickDelay", 25, 1, 200)
    private val flagSilent = BoolValue("Flag-SilentMode", true)
    private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
    private val anotherQueue = LinkedList<C00PacketKeepAlive>()
    private var verus2Stat = false
    val packet = mutableListOf<Packet<*>>()
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var currentTrans = 0
    private var memeTick = 0
    private var vulTickCounterUID = -25767
    private var isSent = false
    var lastUid = 0
    private val fakeLagDelay = MSTimer()
    private val fakeLagDuration = MSTimer()
    private var initPos: Vec3? = null
    private var modified = false
    private var counter = 0
    var packetList = LinkedList<Packet<*>>()
    private val hypList = LinkedList<Packet<*>>()
    private var shouldActive = false
    private var expectedTeleport = false
    var shouldModifyRotation = false
    var clickWindowPackets = CopyOnWriteArrayList<C0EPacketClickWindow>()
    private val packets = ArrayList<Packet<*>>()
    private val scaffold = LiquidBounce.moduleManager.getModule(Scaffold::class.java) as Scaffold
    private var cancel = false
    private val wdTimer = MSTimer()
    var oldPing = -1
    private val timer = TimerUtil()
    private val timer2 = TimerUtil()
    private fun isInventory(action: Short): Boolean = action in 1..99
    private var x = 0.0
    var cancelledPackets = 0
    var iscancelled = false
    var yawDiff = 0f
    var confirmTransactionQueue: Queue<C0FPacketConfirmTransaction> = ConcurrentLinkedQueue()
    var keepAliveQueue: Queue<C00PacketKeepAlive> = ConcurrentLinkedQueue()
    private var y = 0.0
    var angleUtility: AngleUtility = AngleUtility(110F, 120F, 30F, 40F)
    var isCraftingItem = false
    var lastAngle: Angle? = null
    private var z = 0.0
    var aba = false
    private val repeatTimes: Int
        get() = if (LiquidBounce.combatManager.inCombat) {
            verusRepeatTimesFightingValue.get()
        } else {
            verusRepeatTimesValue.get()
        }

    override fun onEnable() {
        习近平()
        expectedTeleport = false
    }

    override fun onDisable() {
        if (modeValue.get().equals("hypixel2", true)) {
            anotherQueue.forEach { sendPacketNoEvent(it) }
            packetQueue.forEach { sendPacketNoEvent(it) }
        }
        modified = false
        when (modeValue.get().toLowerCase()) {
            "fakelag" -> {
                for (packet in packetBuffer) {
                    sendPacketNoEvent(packet)
                }
                packetBuffer.clear()
            }
            "dimples" -> {
                counter = 0
            }
        }
    }
     @EventTarget
         fun onTick(event : TickEvent)    {
         when (modeValue.get().toLowerCase()) {
             "dimples"->{


             }
         }
}
    @EventTarget
    fun onWorld(event: WorldEvent) {
        习近平()
    }
    fun defaultSpeed(): Double {
        var n = if (mc.thePlayer.isSprinting()) 0.25 else 0.2
        if (Minecraft.getMinecraft().thePlayer.isPotionActive(Potion.moveSpeed)) {
            n *= 1.0 + 0.08 * (Minecraft.getMinecraft().thePlayer.getActivePotionEffect(Potion.moveSpeed).amplifier + 1)
        }
        return n
    }

    private fun 习近平() {
        memeTick = 0
        currentTrans = 0
        verus2Stat = false
        packetBuffer.clear()
        isCraftingItem = false
        cancelledPackets = 0
        lastUid = cancelledPackets
        fakeLagDelay.reset()
        fakeLagDuration.reset()
        counter = 0
        vulTickCounterUID = -25767
        timer.reset()
        timer2.reset()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        modified = false
        when (modeValue.get().toLowerCase()) {
            "verus" -> {
                if (fakeLagDelay.hasTimePassed(490L)) {
                    fakeLagDelay.reset()
                    if (packetBuffer.isNotEmpty()) {
                        val packet = packetBuffer.poll()
                        repeat(repeatTimes) {
                            sendPacketNoEvent(packet)
                        }
                        阻挡约18辆59式坦克车队行进("RELEASE")
                    } else {
                        阻挡约18辆59式坦克车队行进("RELEASE BUT EMPTY")
                    }
                }
            }
            "vulcan"->{
                if(fakeLagDelay.hasTimePassed(5000L) && packetBuffer.size > 4) {
                    fakeLagDelay.reset()
                    while (packetBuffer.size > 4) {
                        sendPacketNoEvent(packetBuffer.poll())
                    }
                }
            }
            "fakelag" -> {
                if (!fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) fakeLagDuration.reset()
                // Send
                if (fakeLagDuration.hasTimePassed(lagDurationValue.get().toLong())) {
                    fakeLagDelay.reset()
                    fakeLagDuration.reset()
                    for (packet in packetBuffer) {
                        sendPacketNoEvent(packet)
                    }
                    阻挡约18辆59式坦克车队行进("Release buf(size=${packetBuffer.size})")
                    isSent = true
                    packetBuffer.clear()
                }
            }
        }
    }
    @EventTarget
    fun onMove(event: MoveEvent) {
        if (!mc.isSingleplayer()) {
            if (timer.hasTimeElapsed(10000)) {
                cancel = true
                timer2.reset()
            }
        }
    }
    @EventTarget
    fun onMotion(event: MotionEvent) {
        if (modeValue.get().equals("dimples", true)) {
            if (mc.isSingleplayer()) {
                return
            }
            if (event.isPre()) {
                if (packet.size > 50) {
                    while (!packet.isEmpty()) {
                        sendPacketNoEvent(packet.removeAt(0))
                    }
                }
            }
        }
        if (modeValue.get().equals("hypixel2", true)) {
            val speed = LiquidBounce.moduleManager.getModule(Speed::class.java)!! as Speed
            shouldModifyRotation = false
            if (event.eventState == EventState.PRE) {
                if (speed.state && rotModify.get()) {
                    shouldModifyRotation = true
                }
                if (testFeature.get() && !ServerUtils.isHypixelLobby()) {
                    if (shouldActive && wdTimer.hasTimePassed(testDelay.get().toLong())) {
                        while (!anotherQueue.isEmpty()) {
                            sendPacketNoEvent(anotherQueue.poll())
                            阻挡约18辆59式坦克车队行进("c00, ${anotherQueue.size}")
                        }
                        while (!packetQueue.isEmpty()) {
                            sendPacketNoEvent(packetQueue.poll())
                            阻挡约18辆59式坦克车队行进("c0f, ${packetQueue.size}")
                        }
                    }
                }
            }
        }
    }

  @NativeMethod
    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        when (modeValue.get().toLowerCase()) {
            "flag" -> {
                if (packet is C03PacketPlayer && flagMode.get().equals(
                        "edit",
                        true
                    ) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0
                ) {
                    packet.isMoving = false
                    packet.onGround = false
                    packet.y = -0.08

                    阻挡约18辆59式坦克车队行进("flagged")
                }
                if (packet is S08PacketPlayerPosLook && flagSilent.get()) {
                    if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

                    var x = packet.x - mc.thePlayer.posX
                    var y = packet.y - mc.thePlayer.posY
                    var z = packet.z - mc.thePlayer.posZ
                    var diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        sendPacketNoEvent(
                            C06PacketPlayerPosLook(
                                packet.getX(),
                                packet.getY(),
                                packet.getZ(),
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )

                        阻挡约18辆59式坦克车队行进("silent s08 accept")
                    }
                }
            }

            "vulcan"->{
                if (packet is C0FPacketConfirmTransaction) {
                    if (Math.abs((Math.abs((packet.uid).toInt()).toInt() - Math.abs(vulTickCounterUID.toInt()).toInt()).toInt()) <= 4) {
                        vulTickCounterUID = (packet.uid).toInt()
                        packetBuffer.add(packet)
                        event.cancelEvent()
                    }else if (Math.abs((Math.abs((packet.uid).toInt()).toInt() - 25767).toInt()) <= 4) {
                        vulTickCounterUID = (packet.uid).toInt()
                    }
                }
            }

            "matrix" -> {
                if (matrixNoCheck.get() || LiquidBounce.moduleManager.getModule(Speed::class.java)!!.state || LiquidBounce.moduleManager.getModule(
                        Fly::class.java
                    )!!.state
                ) {
                    if (packet is C03PacketPlayer) {
                        if (matrixNoMovePacket.get() && !packet.isMoving) {
                            event.cancelEvent()
                            阻挡约18辆59式坦克车队行进("no move, cancelled")
                            return
                        }
                        if (matrixMoveFix.get()) {
                            // almost completely disable strafe check, nofall
                            packet.onGround = true
                            if (!packet.rotating) { // fix fly sometimes doesn't land properly since 1.8.x servers all refer to C04, C05, C06 as C03s.
                                packet.rotating = true
                                packet.yaw = mc.thePlayer.rotationYaw
                                packet.pitch = mc.thePlayer.rotationPitch
                            }
                        }
                    }
                }
            }

            "Verus" -> {
                if (this.八九事件最大胜利者江泽民()) {
                    this.packetBuffer.clear()
                    return
                }
                if (packet is C0FPacketConfirmTransaction) {
                    packetBuffer.add(packet)
                    event.cancelEvent()
                    if (packetBuffer.size > verusBufferSizeValue.get()) {
                        if (!verus2Stat) {
                            verus2Stat = true
                            LiquidBounce.hud.addNotification(
                                Notification(
                                    name,
                                    "AntiCheat Disabled!",
                                    NotifyType.SUCCESS
                                )
                            )
                        }
                        val packet = packetBuffer.poll()
                        repeat(repeatTimes) {
                            sendPacketNoEvent(packet)
                        }
                    }
                } else if (packet is C03PacketPlayer) {
                    if ((mc.thePlayer.ticksExisted % verusFlagDelayValue.get() == 0) && (mc.thePlayer.ticksExisted > verusFlagDelayValue.get() + 1) && !modified) {
                        阻挡约18辆59式坦克车队行进("C03 MODIFY")
                        modified = true
                        packet.y -= 11.4514 // 逸一时，误一世
                        packet.onGround = false
                    }
                } else if (packet is S08PacketPlayerPosLook && verusSlientFlagApplyValue.get()) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        // why didnt they check flag apply delay? LMAO
                        阻挡约18辆59式坦克车队行进("FLAG APPLY")
                        sendPacketNoEvent(
                            C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )
                    }
                }

                if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 7) {
                    fakeLagDelay.reset()
                    packetBuffer.clear()
                }
            }

            "basic" -> {
                if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive) {
                    event.cancelEvent()
                }
            }

            "fakelag" -> {
                if (fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) {
                    if (isSent && fakeLagSpoofValue.get()) {
                        sendPacketNoEvent(C03PacketPlayer(true))
                        if (lagDurationValue.get() >= 300) sendPacketNoEvent(C03PacketPlayer(true))
                        isSent = false
                    }
                    if (packet is C00PacketKeepAlive || packet is C0FPacketConfirmTransaction) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if (fakeLagAttackValue.get() && (packet is C02PacketUseEntity || packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                        if (packet is C0APacketAnimation) return
                    }
                    if (fakeLagBlockValue.get() && (packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement || packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if (fakeLagPosValue.get() && (packet is C03PacketPlayer || packet is C04PacketPlayerPosition || packet is C05PacketPlayerLook || packet is C06PacketPlayerPosLook || packet is C0BPacketEntityAction)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                }
            }

            "dimples" -> {

                if (mc.isSingleplayer()) {
                    return
                }
                if(event.packet is C03PacketPlayer){
                    if(!event.packet.isMoving && !mc.thePlayer.isUsingItem){
                        event.cancelEvent()
                    }
                    if(cancel){
                        if(!timer2.hasTimeElapsed(600)){
                            if(!scaffold.state){
                                event.cancelEvent()
                                packets.add(event.packet)
                            }
                        }else{
                            packets.forEach(PacketUtils::sendPacketNoEvent)
                            packets.clear()
                            cancel = false
                        }
                    }
                }

                if (event.packet is C05PacketPlayerLook && mc.thePlayer.isRiding()) {
                    sendPacketNoEvent(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING))
                } else if (event.packet is C0CPacketInput && mc.thePlayer.isRiding()) {
                    sendPacketNoEvent(event.packet)
                    sendPacketNoEvent(C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING))
                    event.cancelEvent()
                }
                if (event.packet is C03PacketPlayer) {

                    if (mc.thePlayer.ticksExisted === 1) {
                        initPos = Vec3(event.packet.x + getRandom(-1000000.0, 1000000.0), event.packet.y + getRandom(-1000000.0, 1000000.0), event.packet.z + getRandom(-1000000.0, 1000000.0))
                    } else if (mc.netHandler.doneLoadingTerrain && initPos != null && mc.thePlayer.ticksExisted < 100) {
                        event.packet.x = initPos!!.xCoord
                        event.packet.y = initPos!!.yCoord
                        event.packet.z = initPos!!.zCoord
                    }
                }
                if (event.packet is S08PacketPlayerPosLook) {
                    val packet = event.packet
                   mc.netHandler.addToSendQueue(C04PacketPlayerPosition(packet.x, packet.y, packet.z, false))
                   mc.thePlayer.motionZ = 0.0
                   mc.thePlayer.motionY = mc.thePlayer.motionZ
                   mc.thePlayer.motionX = mc.thePlayer.motionY
                   mc.thePlayer.setPosition(packet.x, packet.y, packet.z)
                   mc.thePlayer.prevPosX = mc.thePlayer.posX
                   mc.thePlayer.prevPosY = mc.thePlayer.posY
                   mc.thePlayer.prevPosZ = mc.thePlayer.posZ
                   mc.displayGuiScreen(null)
                    event.cancelEvent()
                }

                if (event.packet is C0BPacketEntityAction) {
                    event.cancelEvent()
                }

                if (mc.getNetHandler().doneLoadingTerrain) {
                    if (!event.isCancelled && (event.packet is C03PacketPlayer || event.packet is C0FPacketConfirmTransaction || event.packet is C00PacketKeepAlive)) {
                        event.cancelEvent()
                        packets.add(event.packet)
                    }
                }
                }
        }
    }

    fun 八九事件最大胜利者江泽民(): Boolean {
            if (mc.thePlayer == null) {
                return true
            }
            if (mc.thePlayer.inventory == null) {
                return true
            }
            if (mc.thePlayer.inventory.hasItem(Items.compass)) {
                return true
            }
        return mc.thePlayer == null || mc.thePlayer.ticksExisted <= 5
    }
    fun getRandom(min: Double, max: Double): Double {
        var min = min
        var max = max
        if (min == max) {
            return min
        } else if (min > max) {
            val d = min
            min = max
            max = d
        }
        return ThreadLocalRandom.current().nextDouble(min, max)
    }
    private fun 阻挡约18辆59式坦克车队行进(str: String) {
        if (debugValue.get()) {
            ClientUtils.displayChatMessage(" [Disabler] $str")
        }
    }

    override val tag: String
        get() = modeValue.get()
}