package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.event.*;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.PacketUtils;
import net.ccbluex.liquidbounce.utils.misc.PositionAndRotationUtils;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.ArrayDeque;

@ModuleInfo(name = "Disabler", description = "destroy watchdog", category = ModuleCategory.EXPLOIT)
public class Disabler extends Module {
    private final ArrayDeque<C0FPacketConfirmTransaction> C0FQueue = new ArrayDeque();
    private final ArrayDeque<C00PacketKeepAlive> C00Queue = new ArrayDeque();
    private final PositionAndRotationUtils S08 = new PositionAndRotationUtils(0.0, 0.0, 0.0, 0.0f, 0.0f);
    private int lastUid;
    private boolean active;

    @Override
    public void onEnable() {
        super.onEnable();
        resetDisabler(true);
    }

    @Override
    public void onDisable() {
        super.onDisable();
        resetDisabler(true);
    }

    @EventTarget
    public void onUpdate(UpdateEvent event) {
        if (mc.thePlayer.ticksExisted < 1)
            resetDisabler(true);

        if (active && mc.thePlayer.ticksExisted % RandomUtils.getRandom(2, 4) == 0) {
            while (C0FQueue.size() > RandomUtils.getRandom(3, 4)) {
                pollC0F();
            }

            while (C00Queue.size() > RandomUtils.getRandom(1, 2)) {
                pollC00();
            }
        }
    }

    @EventTarget
    public void onPacket(PacketEvent event) {
        Packet<?> packet = event.getPacket();

        if (packet instanceof C0FPacketConfirmTransaction) {
            C0FPacketConfirmTransaction C0F = (C0FPacketConfirmTransaction) packet;
            if (C0F.getWindowId() == 0 && C0F.getUid() < 0) {
                int preUid = lastUid - 1;
                if (preUid == C0F.getUid()) {
                    if (!active) {
                        active = true;
                    }

                    C0FQueue.offer(C0F);
                    event.cancelEvent();
                } else {
                    resetDisabler(true);
                }

                lastUid = C0F.getUid();
            }
        }

        if (packet instanceof C00PacketKeepAlive && active) {
            C00Queue.offer((C00PacketKeepAlive) packet);
            event.cancelEvent();
        }

        if (packet instanceof S08PacketPlayerPosLook) {
            S08.setPositionAndRotation((S08PacketPlayerPosLook) packet);
        }

        if (packet instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
            C03PacketPlayer.C06PacketPlayerPosLook C06 = (C03PacketPlayer.C06PacketPlayerPosLook) packet;
            if (isFromS08(C06)) {
                PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(C06.getPositionX(), C06.getPositionY(), C06.getPositionZ(), C06.isOnGround()));
                PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C05PacketPlayerLook(C06.getYaw(), C06.getPitch(), C06.isOnGround()));
                event.cancelEvent();
                S08.reset();
            }
        }
    }

    private void resetDisabler(boolean release) {
        if (release) {
            while (!C0FQueue.isEmpty()) {
                pollC0F();
            }
            while (!C00Queue.isEmpty()) {
                pollC00();
            }
        } else {
            C0FQueue.clear();
            C00Queue.clear();
        }

        S08.reset();
        active = false;
        lastUid = -1;
    }

    private void pollC0F() {
        try {
            PacketUtils.sendPacketNoEvent(C0FQueue.poll());
        } catch (Exception exception) {
            // empty catch block
        }
    }

    private void pollC00() {
        try {
            PacketUtils.sendPacketNoEvent(C00Queue.poll());
        } catch (Exception exception) {
            // empty catch block
        }
    }

    private boolean isFromS08(C03PacketPlayer.C06PacketPlayerPosLook C06) {
        return S08.getX() == C06.getPositionX()
                && S08.getY() == C06.getPositionY()
                && S08.getZ() == C06.getPositionZ()
                && S08.getYaw() == C06.getYaw()
                && S08.getPitch() == C06.getPitch()
                && !C06.isOnGround();
    }

    @Override
    public String getTag() {
        return "Hypixel";
    }
}