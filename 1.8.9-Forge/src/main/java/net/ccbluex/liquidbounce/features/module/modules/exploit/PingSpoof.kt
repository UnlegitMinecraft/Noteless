/*
 * LiquidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CCBlueX/LiquidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.timer.TimeUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*

@ModuleInfo(name = "PingSpoof", description = "Spoofs your ping to a given value.", category = ModuleCategory.EXPLOIT)
class PingSpoof : Module() {
        private val maxDelayValue: IntegerValue = object : IntegerValue("MaxDelay", 1000, 0, 5000) {
                override fun onChanged(oldValue: Int, newValue: Int) {
                        val minDelayValue = minDelayValue.get()
                        if (minDelayValue > newValue) set(minDelayValue)
                }
        }
        private val minDelayValue: IntegerValue = object : IntegerValue("MinDelay", 500, 0, 5000) {
                override fun onChanged(oldValue: Int, newValue: Int) {
                        val maxDelayValue = maxDelayValue.get()
                        if (maxDelayValue < newValue) set(maxDelayValue)
                }
        }

        private val c00Value = BoolValue("C00", true)
        private val c0FValue = BoolValue("C0F", false)
        private val c0BValue = BoolValue("C0B", false)
        private val c13Value = BoolValue("C13", false)
        private val c16Value = BoolValue("C16", true)
        private val cancelValue = BoolValue("Cancel", false)
        private val packetsMap = HashMap<Packet<*>, Long>()

        override fun onDisable() {
                packetsMap.clear()
        }

        private fun isVaildPacket(packet: Packet<*>)
                = (packet is C00PacketKeepAlive && c00Value.get()) || (packet is C0FPacketConfirmTransaction && c0FValue.get())
                || (packet is C0BPacketEntityAction && c0BValue.get()) || (packet is C13PacketPlayerAbilities && c13Value.get())
                || (packet is C16PacketClientStatus && c16Value.get())

        @EventTarget
        fun onPacket(event: PacketEvent) {
                val packet = event.packet
                if (isVaildPacket(packet) && !(mc.thePlayer.isDead || mc.thePlayer.health <= 0)
                        && !packetsMap.containsKey(packet)) {
                        event.cancelEvent()
                        if(!cancelValue.get()) {
                                synchronized(packetsMap) {
                                        packetsMap.put(packet, System.currentTimeMillis() + TimeUtils.randomDelay(minDelayValue.get(), maxDelayValue.get()))
                                }
                        }
                }
        }

        @EventTarget(ignoreCondition = true)
        fun onUpdate(event: UpdateEvent) {
                try {
                        if(cancelValue.get())
                                return

                        synchronized(packetsMap) {
                                val iterator: MutableIterator<Map.Entry<Packet<*>, Long?>> = packetsMap.entries.iterator()
                                while (iterator.hasNext()) {
                                        val (key, value) = iterator.next()
                                        if (value!! < System.currentTimeMillis()) {
                                                mc.netHandler.addToSendQueue(key)
                                                iterator.remove()
                                        }
                                }
                        }
                } catch (t: Throwable) {
                        t.printStackTrace()
                }
        }
}